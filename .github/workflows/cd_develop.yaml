name: CD Develop
on:
  push:
    branches:
      - build/dev/**

env:
  JAVA_VERSION: "12.x"
  FLUTTER_VERSION: "3.24.3"
  TESTER_GROUPS: "testers"

  # Android
  PROPERTIES_PATH: "./app/android/local.properties"
  KEY_STORE_NAME: "key.jks"
  KEY_STORE_PATH: "./app/android/key.jks"
  ANDROID_APP_ID: "TODO"
  APK_PATH: "app/build/app/outputs/flutter-apk/app-develop-release.apk"
  APK_FILE_NAME: "app-develop-release.apk"

  # iOS
  IOS_APP_ID: "TODO"
  # File name is same with $APP_DISPLAY_NAME in .xcconfig file
  IPA_PATH: "app/build/ios/ipa/Develop.ipa"
  IPA_FILE_NAME: "Develop.ipa"

  # secrets
  # FIREBASE_TOKEN

  # <-- iOS -->
  # DEVELOP_BUILD_PROVISION_PROFILE_BASE64
  # BUILD_CERTIFICATE_BASE64
  # P12_PASSWORD
  # KEYCHAIN_PASSWORD

  # <-- Android -->
  # STORE_PASSWORD
  # KEY_PASSWORD
  # KEY_ALIAS
  # KEY_STORE

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.DEVELOP_BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - uses: actions/setup-java@v1
        with:
          java-version: ${{env.JAVA_VERSION}}
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{env.FLUTTER_VERSION}}

      - name: Add pub cache bin to PATH
        run: echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: Add pub cache to PATH
        run: echo "PUB_CACHE="$HOME/.pub-cache"" >> $GITHUB_ENV

      - name: Run pub get and gen files
        run: make sync

      - name: Build IPA
        run: make build_dev_ipa

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.IPA_FILE_NAME}}
          path: ${{env.IPA_PATH}}
          retention-days: 1
          if-no-files-found: error

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  build-android:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Install Android keystore
      - run: |
          echo keystore.storePassword=\${{secrets.STORE_PASSWORD}} > ${{env.PROPERTIES_PATH}}
          echo keystore.keyPassword=\${{secrets.KEY_PASSWORD}} >> ${{env.PROPERTIES_PATH}}
          echo keystore.keyAlias=\${{secrets.KEY_ALIAS}} >> ${{env.PROPERTIES_PATH}}
          echo keystore.storeFile=../${{env.KEY_STORE_NAME}} >> ${{env.PROPERTIES_PATH}}
      # Decoding base64 key into a file
      # Encoding using following command: cat key.jks | base64
      - run: echo "${{secrets.KEY_STORE}}" | base64 --decode > ${{env.KEY_STORE_PATH}}

      - uses: actions/setup-java@v1
        with:
          java-version: ${{env.JAVA_VERSION}}
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{env.FLUTTER_VERSION}}

      - name: Add pub cache bin to PATH
        run: echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: Add pub cache to PATH
        run: echo "PUB_CACHE="$HOME/.pub-cache"" >> $GITHUB_ENV

      - name: Run pub get and gen files
        run: make sync

      - name: Build APK
        run: make build_dev_apk

      - name: Upload APK artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.APK_FILE_NAME}}
          path: ${{env.APK_PATH}}
          retention-days: 1
          if-no-files-found: error

  distribute-ios:
    needs: build-ios
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: ${{env.IPA_FILE_NAME}}

      - name: Upload IPA to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{env.IOS_APP_ID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          groups: ${{env.TESTER_GROUPS}}
          file: ${{env.IPA_FILE_NAME}}
          releaseNotes: "${{ github.event.head_commit.author.name }}: ${{ github.event.head_commit.message }}"

  distribute-android:
    needs: build-android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: ${{env.APK_FILE_NAME}}

      - name: Upload APK to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{env.ANDROID_APP_ID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          groups: ${{env.TESTER_GROUPS}}
          file: ${{env.APK_FILE_NAME}}
          releaseNotes: "${{ github.event.head_commit.author.name }}: ${{ github.event.head_commit.message }}"

