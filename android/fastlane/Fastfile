# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  # secrets
  FIREBASE_TOKEN = ENV["FIREBASE_TOKEN"] # run: `firebase login:ci`
  
  # config
  DEV_APP_ID = "1:553358319716:android:4a1d8352483ca8e20f3f71"
  QA_APP_ID = "1:458527024484:android:422540b7cf2b694f288671"
  STG_APP_ID = "1:521801780624:android:794b1dc60332e404597715"
  FIREBASE_GROUPS = "testers"

  # config slack notification
  SLACK_HOOKS_URL = "https://hooks.slack.com/services/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"
  MENTIONS = "@channel"
  MESSAGE = "Xin các anh chị tester nhẹ tay giúp!"

  # build info
  DEV_FLAVOR = "develop"
  QA_FLAVOR = "qa"
  STG_FLAVOR = "staging"
  APP_DIR = "../android/app"
  DEV_APK_PATH = "../build/app/outputs/flutter-apk/app-develop-release.apk"
  QA_APK_PATH = "../build/app/outputs/flutter-apk/app-qa-release.apk"
  STG_APK_PATH = "../build/app/outputs/flutter-apk/app-staging-release.apk"
  RELEASE_NOTES_PATH = "../RELEASE_NOTES.md"

  # ===== deploy to firebase =====
  desc "Develop: Deploy app to Firebase"
  lane :firebase_upload_develop do
    deployToFirebase(DEV_APP_ID, DEV_APK_PATH, DEV_FLAVOR)
  end

  desc "Develop: Increase version, build & deploy app to Firebase Distribution"
  lane :increase_version_build_and_up_firebase_develop do
    increaseVersionAndBuildAndDeployToFirebase(DEV_APP_ID, DEV_FLAVOR)
  end

  desc "Qa: Deploy app to Firebase"
  lane :firebase_upload_qa do
    deployToFirebase(QA_APP_ID, QA_APK_PATH, QA_FLAVOR)
  end

  desc "Qa: Increase version, build & deploy app to Firebase Distribution"
  lane :increase_version_build_and_up_firebase_qa do
    increaseVersionAndBuildAndDeployToFirebase(QA_APP_ID, QA_FLAVOR)
  end

  desc "Staging: Deploy app to Firebase"
  lane :firebase_upload_staging do
    deployToFirebase(STG_APP_ID, STG_APK_PATH, STG_FLAVOR)
  end

  desc "Staging: Increase version, build & deploy app to Firebase Distribution"
  lane :increase_version_build_and_up_firebase_staging do
    increaseVersionAndBuildAndDeployToFirebase(STG_APP_ID, STG_FLAVOR)
  end

  def deployToFirebase(app_id, apk_path, flavor)
    begin
      firebase_app_distribution(
        firebase_cli_token: FIREBASE_TOKEN,
        app: app_id,
        groups: FIREBASE_GROUPS,
        android_artifact_path: apk_path,
        release_notes_file: RELEASE_NOTES_PATH
      )

      latest_release = firebase_app_distribution_get_latest_release(
        app: app_id,
        firebase_cli_token: FIREBASE_TOKEN
      )
      version = "#{latest_release[:displayVersion]}(#{latest_release[:buildVersion]})"
      changelog = latest_release.fetch(:releaseNotes, nil)&.fetch(:text, nil)
      if changelog == nil
        raise "Release notes is empty"
      end
      sendSlack("#{MENTIONS} *Firebase Android #{flavor} #{version}*\n*Release notes:* #{changelog}\n#{MESSAGE}")
    rescue => exception
      error(exception)
    end
  end

  def increaseVersionAndBuildAndDeployToFirebase(app_id, flavor)
    begin
      latest_release = firebase_app_distribution_get_latest_release(
        app: app_id,
        firebase_cli_token: FIREBASE_TOKEN
      )
      increment_version_code(
        version_code: latest_release.nil? ? 1 : latest_release[:buildVersion].to_i + 1,
        flavor: flavor,
        app_project_dir: APP_DIR
      )
      if flavor == DEV_FLAVOR
        sh("cd ../.. && make build_dev_apk")
        firebase_upload_develop
      elsif flavor == QA_FLAVOR
        sh("cd ../.. && make build_qa_apk")
        firebase_upload_qa
      elsif flavor == STG_FLAVOR
        sh("cd ../.. && make build_stg_apk")
        firebase_upload_staging
      else
        raise "flavor #{flavor} is invalid"
      end
      
    rescue => exception
      error(exception)
    end
  end

  def sendSlack(message, success = true)
    slack(
      message: message,
      success: success,
      slack_url: SLACK_HOOKS_URL,
      link_names: true,
      default_payloads: [:git_branch, :lane]
    )
  end

  def error(exception)
    sendSlack("#{MENTIONS} Build failed: #{exception.to_s}", false)
  end
end
